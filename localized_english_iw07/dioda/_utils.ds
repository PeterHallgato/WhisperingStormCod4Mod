///==========================================///
///    _____    _               _            ///
///   |  __ \  (_)             | |           ///
///   | |  | |  _    ___     __| |   __ _    ///
///   | |  | | | |  / _ \   / _` |  / _` |   ///
///   | |__| | | | | (_) | | (_| | | (_| |   ///
///   |_____/  |_|  \___/   \__,_|  \__,_|   ///
///                                          ///
///           www.servergreen.eu             ///
///                                          ///
///==========================================///

precacheClientInfo(cl, name, value)
{
	if(!isSet(cl.info[name]))
		cl.info[name] = value;
	
	return cl.info[name];
}

precacheDvar(name, value, type)
{	
	out = getDvar(name);
	if(!empty(out) && !strCmp(out, "_null"))
	{
		switch(type)
		{
			case "string":
				out = getDvar(name);
			break;
			case "int":
				out = getDvarInt(name);
			break;
			case "float":
				out = getDvarFloat(name);
			break;
		}
		return out;
	}
	
	return value;
}
/*
bestPlayer(type)
{
	players = getAllPlayers();
	cl = undefined;
	score = 0;
	for( i = 0; i < players.size; i++ )
	{
		if ( players[i].pers[type] >= score )
		{
			score = players[i].pers[type];
			cl = players[i];
		}
	}
	return cl;
}
*/
rgb(r, g, b)
{
	return (r/255, g/255, b/255);
}

setClientHudScreen(text, y, fontType, fontSize, Color, glowColor, glowAlpha, Alpha, faidTime, Wait)
{
	if(isSet(self.hud["clientscreen"]))
	{
		self waittill("clientscreen");
		self.hud["clientscreen"] destroy();
	}
	
	self.hud["clientscreen"] = NewClientHudElem(self);
	self.hud["clientscreen"].x = 0;
	self.hud["clientscreen"].y = y;
	self.hud["clientscreen"].alignx = "center";
	self.hud["clientscreen"].aligny = "middle";
	self.hud["clientscreen"].horzAlign = "center";
	self.hud["clientscreen"].vertAlign = "middle";
	self.hud["clientscreen"].font = fontType;
	self.hud["clientscreen"].fontScale = fontSize;
	self.hud["clientscreen"].Color = Color;
	self.hud["clientscreen"].glowColor = glowColor;
	self.hud["clientscreen"].glowAlpha = glowAlpha;
	self.hud["clientscreen"] setText(text);
	
	self.hud["clientscreen"].alpha = 0;
	self.hud["clientscreen"] FadeOverTime(faidTime);
	self.hud["clientscreen"].alpha = Alpha;
	wait(Wait);
	self.hud["clientscreen"] FadeOverTime(faidTime);
	self.hud["clientscreen"].alpha = 0;
	
	self notify("clientscreen");
	self.hud["clientscreen"] destroy();
}

//append------
streakWarning(ownermsg,teammsg,enemymsg) {
	players = GetEntArray("player","classname");
	for(i=0;i<players.size;i++) {
		if(players[i] == self)	
			players[i] iPrintln(ownermsg);
		else if(players[i].pers["team"] == self.pers["team"] && level.teambased)
			players[i] iPrintln(teammsg);
		else if(players[i].pers["team"] != "spectator")
			players[i] iPrintln(enemymsg);
	}
}

setHealth(health) {
	self notify("end_healthregen");
	self.maxhealth = health;
	self.health = self.maxhealth;
	self setnormalhealth (self.health);
	self thread maps\mp\gametypes\_healthoverlay::playerHealthRegen();
}

isRealyAlive() {
	return (self.pers["team"] != "spectator" && self.health && self.sessionstate == "playing");
}

getAllPlayers() {
	return getEntArray( "player", "classname" );
}

TriggerEarthquake(a,b,c,d) {
	if(!isDefined(level.earthquake)) 
		level.earthquake = [];
	index = level.earthquake.size;
	level.earthquake[index] = spawnStruct();
	level.earthquake[index].duration = b;
	level.earthquake[index].origin = c;
	level.earthquake[index].radius = d;
	Earthquake(a,b,c,d);
	level thread deleteTrigger(level.earthquake[index]);
}

deleteTrigger(trigger) {
	wait trigger.duration;
	array = [];
	for(i=0;i<level.earthquake.size;i++)
		if(level.earthquake[i] != trigger)
			array[array.size] = level.earthquake[i];
	level.earthquake = array;
}