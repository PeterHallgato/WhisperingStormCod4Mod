///==========================================///
///    _____    _               _            ///
///   |  __ \  (_)             | |           ///
///   | |  | |  _    ___     __| |   __ _    ///
///   | |  | | | |  / _ \   / _` |  / _` |   ///
///   | |__| | | | | (_) | | (_| | | (_| |   ///
///   |_____/  |_|  \___/   \__,_|  \__,_|   ///
///                                          ///
///           www.servergreen.eu             ///
///                                          ///
///==========================================///

init()
{
	// Map voting
	if(!level.mapvote) 
		return;

	// Setup strings
	level.mapvotetext["MapVote"]		= &"Press ^0FIRE^7 to vote";
	level.mapvotetext["TimeLeft"] 		= &"Time Left: ";
	level.mapvotetext["MapVoteHeader"] 	= &"Next Map Vote";

	// Precache stuff used by map voting
	//precacheString(level.mapvotetext["MapVote"]);
	//precacheString(level.mapvotetext["TimeLeft"]);
	//precacheString(level.mapvotetext["MapVoteHeader"]);
}

Initialise()
{
	if(!level.mapvote)
		return;
	
	level notify("mapvote_start");
	//thread backgroundFx();
	level.mapvotetime = 10;
	//if(!level.mapvote) return;

	level.mapvotehudoffset = -7;

	wait .5;

	CreateHud();

	thread RunMapVote();
	SetExpFog( 256, 512, 0.243, 0.643, 0.164, 0 );

	level waittill( "VotingComplete" );

	DeleteHud();
}

backgroundFx()
{
	while(1)
	{
		SetExpFog( 256, 512, 0.576, 0.078, 0.078, 0 );
		wait(3);
		SetExpFog( 256, 512, 1, 1, 1, 0 );
		wait(3);
		SetExpFog( 256, 512, 0.243, 0.643, 0.164, 0 );
	}
}

CreateHud()
{

	// top line
	/*
	level.MapVoteHud[0] = newHudElem();
	level.MapVoteHud[0].hideWhenInMenu = true;
	level.MapVoteHud[0].alignX = "center";
	level.MapVoteHud[0].x = 320;
	level.MapVoteHud[0].y = 55;
	level.MapVoteHud[0].alpha = 0.3;
	level.MapVoteHud[0].sort = 9994;
	level.MapVoteHud[0] setShader("white", 318, 2);
	level.MapVoteHud[0].horzAlign = "fullscreen";
	level.MapVoteHud[0].vertAlign = "fullscreen";

	// mid line
	level.MapVoteHud[1] = newHudElem();
	level.MapVoteHud[1].hideWhenInMenu = true;
	level.MapVoteHud[1].alignX = "center";
	level.MapVoteHud[1].x = 320;
	level.MapVoteHud[1].y = 188;
	level.MapVoteHud[1].alpha = 0.3;
	level.MapVoteHud[1].sort = 9994;
	level.MapVoteHud[1] setShader("white", 318, 2);
	level.MapVoteHud[1].horzAlign = "fullscreen";
	level.MapVoteHud[1].vertAlign = "fullscreen";

	// btm line
	level.MapVoteHud[2] = newHudElem();
	level.MapVoteHud[2].hideWhenInMenu = true;
	level.MapVoteHud[2].alignX = "center";
	level.MapVoteHud[2].x = 320;
	level.MapVoteHud[2].y = 213;
	level.MapVoteHud[2].alpha = 0.3;
	level.MapVoteHud[2].sort = 9994;
	level.MapVoteHud[2] setShader("white", 318, 2);
	level.MapVoteHud[2].horzAlign = "fullscreen";
	level.MapVoteHud[2].vertAlign = "fullscreen";
	*/
	
	level.MapVoteHud[1] = newHudElem();
	level.MapVoteHud[1].hideWhenInMenu = true;
	level.MapVoteHud[1].alignX = "center";
	level.MapVoteHud[1].x = 320;
	level.MapVoteHud[1].y = 26;
	level.MapVoteHud[1].alpha = 0.3;
	level.MapVoteHud[1].sort = 9994;
	level.MapVoteHud[1] setShader("line_horizontal", 360, 189);
	level.MapVoteHud[1].horzAlign = "fullscreen";
	level.MapVoteHud[1].vertAlign = "fullscreen";
	
	level.MapVoteHud[2] = newHudElem();
	level.MapVoteHud[2].hideWhenInMenu = true;
	level.MapVoteHud[2].alignX = "center";
	level.MapVoteHud[2].x = 320;
	level.MapVoteHud[2].y = 29;
	level.MapVoteHud[2].alpha = 1;
	level.MapVoteHud[2].sort = 9994;
	level.MapVoteHud[2] setShader("line_horizontal", 360, 25);
	level.MapVoteHud[2].horzAlign = "fullscreen";
	level.MapVoteHud[2].vertAlign = "fullscreen";
	level.MapVoteHud[2].color = (0,0,0);
	
	level.MapVoteHud[3] = newHudElem();
	level.MapVoteHud[3].hideWhenInMenu = true;
	level.MapVoteHud[3].alignX = "center";
	level.MapVoteHud[3].x = 320;
	level.MapVoteHud[3].y = 24;
	level.MapVoteHud[3].alpha = 0.9;
	level.MapVoteHud[3].sort = 9995;
	level.MapVoteHud[3].fontScale = 2.4;
	level.MapVoteHud[3] setText("MapVote");
	level.MapVoteHud[3].horzAlign = "fullscreen";
	level.MapVoteHud[3].vertAlign = "fullscreen";
	level.MapVoteHud[3].color = level.info["hud"]["color"];
	
	
	// background
	level.MapVoteHud[7] = newHudElem();
	level.MapVoteHud[7].hideWhenInMenu = true;
	level.MapVoteHud[7].alignX = "center";
	level.MapVoteHud[7].x = 320;
	level.MapVoteHud[7].y = 53;
	level.MapVoteHud[7].alpha = 1;
	level.MapVoteHud[7].color = level.info["hud"]["color"];
	level.MapVoteHud[7].sort = 9993;
	level.MapVoteHud[7] setShader("line_horizontal", 360, 164);
	level.MapVoteHud[7].horzAlign = "fullscreen";
	level.MapVoteHud[7].vertAlign = "fullscreen";
	
	/*
	// left line
	level.MapVoteHud[3] = newHudElem();
	level.MapVoteHud[3].hideWhenInMenu = true;
	level.MapVoteHud[3].alignX = "center";
	level.MapVoteHud[3].x = 160;
	level.MapVoteHud[3].y = 55;
	level.MapVoteHud[3].alpha = 0.3;
	level.MapVoteHud[3].sort = 9994;
	level.MapVoteHud[3] setShader("white", 2, 160);
	level.MapVoteHud[3].horzAlign = "fullscreen";
	level.MapVoteHud[3].vertAlign = "fullscreen";

	// right line
	level.MapVoteHud[4] = newHudElem();
	level.MapVoteHud[4].hideWhenInMenu = true;
	level.MapVoteHud[4].alignX = "center";
	level.MapVoteHud[4].x = 480;
	level.MapVoteHud[4].y = 55;
	level.MapVoteHud[4].alpha = 0.3;
	level.MapVoteHud[4].sort = 9994;
	level.MapVoteHud[4] setShader("white", 2, 160);
	level.MapVoteHud[4].horzAlign = "fullscreen";
	level.MapVoteHud[4].vertAlign = "fullscreen";
	*/
	// header
	level.MapVoteHud[5] = newHudElem();
	level.MapVoteHud[5].hideWhenInMenu = true;
	level.MapVoteHud[5].x = 160;
	level.MapVoteHud[5].y = 193;
	level.MapVoteHud[5].alpha = 1;
	level.MapVoteHud[5].fontscale = 1.4;
	level.MapVoteHud[5].sort = 9994;
	level.MapVoteHud[5] setText("Press ^0FIRE^7 to vote");
	level.MapVoteHud[5].horzAlign = "fullscreen";
	level.MapVoteHud[5].vertAlign = "fullscreen";

	// time
	level.MapVoteHud[6] = newHudElem();
	level.MapVoteHud[6].hideWhenInMenu = true;
	level.MapVoteHud[6].alignX = "right";
	level.MapVoteHud[6].x = 465;
	level.MapVoteHud[6].y = 193;
	level.MapVoteHud[6].alpha = 1;
	level.MapVoteHud[6].color = (0,0,0);
	level.MapVoteHud[6].fontscale = 1.4;
	level.MapVoteHud[6].sort = 9994;
	level.MapVoteHud[6].label = level.mapvotetext["TimeLeft"];
	level.MapVoteHud[6] setValue(level.mapvotetime);
	level.MapVoteHud[6].horzAlign = "fullscreen";
	level.MapVoteHud[6].vertAlign = "fullscreen";

	// choice of maps/gametypes
	level.MapVoteNames[0] = newHudElem();
	level.MapVoteNames[1] = newHudElem();
	level.MapVoteNames[2] = newHudElem();
	level.MapVoteNames[3] = newHudElem();
	level.MapVoteNames[4] = newHudElem();
	level.MapVoteNames[5] = newHudElem();
	level.MapVoteNames[6] = newHudElem();

	// values for each selection
	level.MapVoteVotes[0] = newHudElem();
	level.MapVoteVotes[1] = newHudElem();
	level.MapVoteVotes[2] = newHudElem();
	level.MapVoteVotes[3] = newHudElem();
	level.MapVoteVotes[4] = newHudElem();
	level.MapVoteVotes[5] = newHudElem();
	level.MapVoteVotes[6] = newHudElem();

	yPos = 62;
	for (i = 0; i < level.MapVoteNames.size; i++)
	{
		level.MapVoteNames[i].hideWhenInMenu = true;
		level.MapVoteNames[i].x = 160; //200
		level.MapVoteNames[i].y = yPos;
		level.MapVoteNames[i].alpha = 1;
		level.MapVoteNames[i].sort = 9995;
		level.MapVoteNames[i].glowColor = level.info["hud"]["color"];
		level.MapVoteNames[i].glowAlpha = 0.2;
		level.MapVoteNames[i].fontscale = 1.4;
		level.MapVoteNames[i].horzAlign = "fullscreen";
		level.MapVoteNames[i].vertAlign = "fullscreen";
		//
		level.MapVoteVotes[i].hideWhenInMenu = true;
		level.MapVoteVotes[i].alignX = "right";
		level.MapVoteVotes[i].x = 465;
		level.MapVoteVotes[i].y = yPos;
		level.MapVoteVotes[i].alpha = 1;
		level.MapVoteVotes[i].glowColor = level.info["hud"]["color"];
		level.MapVoteVotes[i].glowAlpha = 0.2;
		level.MapVoteVotes[i].sort = 9996;
		level.MapVoteVotes[i].fontscale = 1.4;
		level.MapVoteVotes[i].horzAlign = "fullscreen";
		level.MapVoteVotes[i].vertAlign = "fullscreen";
		//
		yPos += 17;
	}
}

RunMapVote()
{
	maps = undefined;
	x = undefined;

	currentgt = "war";
	currentmap = getdvar("mapname");
 

	x = GetRandomMapRotation();
				
	if(isdefined(x))
	{
		if(isdefined(x.maps))
			maps = x.maps;
		x delete();
	}

	// Any maps?
	if(!isdefined(maps))
	{
		wait 0.05;
		level notify("VotingComplete");
		return;
	}

	// Fill all alternatives with the current map in case there is not enough unique maps
	for(j=0;j<7;j++)
	{
		level.mapcandidate[j]["map"] = currentmap;
		level.mapcandidate[j]["mapname"] = "Replay this map";
		level.mapcandidate[j]["gametype"] = currentgt;
		level.mapcandidate[j]["votes"] = 0;
	}
	
	//get candidates
	i = 0;
	for(j=0;j<7;j++)
	{
		// Skip current map and gametype combination
		if(maps[i]["map"] == currentmap && maps[i]["gametype"] == currentgt)
			i++;

		// Any maps left?
		if(!isdefined(maps[i]))
			break;

		level.mapcandidate[j]["map"] = maps[i]["map"];
		level.mapcandidate[j]["mapname"] = getMapName(maps[i]["map"]);
		level.mapcandidate[j]["gametype"] = maps[i]["gametype"];
		level.mapcandidate[j]["votes"] = 0;

		i++;

		// Any maps left?
		if(!isdefined(maps[i]))
			break;

		// Keep current map as last alternative?
		if(level.mapvotereplay && j>4)
			break;
	}
	
	thread DisplayMapChoices();
	
	game["menu_team"] = "";

	//start a voting thread per player
	players = level.players;
	for(i = 0; i < players.size; i++)
		players[i] thread PlayerVote();
	
	thread VoteLogic();	
}

DeleteHud()
{
	level.MapVoteHud[0] destroy();
	level.MapVoteHud[1] destroy();
	level.MapVoteHud[2] destroy();
	level.MapVoteHud[3] destroy();
	level.MapVoteHud[4] destroy();
	level.MapVoteHud[5] destroy();
	level.MapVoteHud[6] destroy();
	level.MapVoteHud[7] destroy();
	level.MapVoteNames[0] destroy();
	level.MapVoteNames[1] destroy();
	level.MapVoteNames[2] destroy();
	level.MapVoteNames[3] destroy();
	level.MapVoteNames[4] destroy();
	level.MapVoteNames[5] destroy();
	level.MapVoteNames[6] destroy();
	level.MapVoteVotes[0] destroy();
	level.MapVoteVotes[1] destroy();
	level.MapVoteVotes[2] destroy();
	level.MapVoteVotes[3] destroy();	
	level.MapVoteVotes[4] destroy();
	level.MapVoteVotes[5] destroy();
	level.MapVoteVotes[6] destroy();

	players = level.players;
	for(i = 0; i < players.size; i++)
		if(isdefined(players[i].vote_indicator))
			players[i].vote_indicator destroy();
}

//Displays the map candidates
DisplayMapChoices()
{
	level endon("VotingDone");

	for (i = 0; i < level.MapVoteNames.size; i++)
	{
		if (isDefined(level.mapcandidate[i]))
		{
			if (isDefined(level.mapcandidate[i]["gametype"]))
				level.MapVoteNames[i] setText(level.mapcandidate[i]["mapname"]);
			else
				level.MapVoteNames[i] setText(level.mapcandidate[i]["mapname"]);
		}
		wait 0.05;
	}
}

//Changes the players vote as he hits the attack button and updates HUD
PlayerVote()
{
	level endon( "VotingDone" );
	self endon( "disconnect" );

	novote = false;
	
	// No voting for spectators
	if( self.pers["team"] == "spectator" || (isSet(self.pers["isBot"]) && self.pers["isBot"]))
		novote = true;
		
	// Spawn player as spectator
	self notify( "reset_outcome" );
	self freezecontrols( false );
	self maps\mp\gametypes\_globallogic::spawnSpectator();
	self.sessionstate = "spectator";
	self.spectatorclient = -1;
	resettimeout();
	
	//remove the scoreboard
	self setClientdvar("g_scriptMainMenu", "");
	self closeMenu();

	self allowSpectateTeam( "allies", false );
	self allowSpectateTeam( "axis", false );
	self allowSpectateTeam( "freelook", false );
	self allowSpectateTeam( "none", true );

	if( novote )
		return;

	colors[0] = (0,   0,  1);
	colors[1] = (0, 0.5,  1);
	colors[2] = (0,   1,  1);
	colors[3] = (0,   1,0.5);
	colors[4] = (0,   1,  0);
	colors[5] = (1,   0,  1);
	colors[6] = (1, 0.5,  1);
	
	self.vote_indicator = newClientHudElem( self );
	self.vote_indicator.alignY = "middle";
	self.vote_indicator.x = 102;
	self.vote_indicator.y = level.mapvotehudoffset + 60;
	self.vote_indicator.archived = false;
	self.vote_indicator.sort = 9998;
	self.vote_indicator.alpha = 0;
	self.vote_indicator.color = colors[0];
	self.vote_indicator setShader("line_horizontal", 435, 17);
	
	hasVoted = false;

	for(;;)
	{
		wait .01;

		if( self attackButtonPressed() == true )
		{
			// -- Added by Number7 --
			if(!hasVoted)
			{
				self.vote_indicator.alpha = 1;
				self.votechoice = 0;
				hasVoted = true;
			}
			else
				self.votechoice++;

			if (self.votechoice == 7)
				self.votechoice = 0;

			self iprintln( "You have voted for ^2" + level.mapcandidate[self.votechoice]["mapname"] );
			self.vote_indicator.y = 70 + self.votechoice * 17;			
			self.vote_indicator.color = colors[self.votechoice];

			self playSound("ui_mp_timer_countdown");
		}					
		while( self attackButtonPressed() == true )
			wait.01;

		self.sessionstate = "spectator";
		self.spectatorclient = -1;
	}
}

//Determines winning map and sets rotation
VoteLogic()
{
	//Vote Timer
	for ( ; level.mapvotetime >= 0; level.mapvotetime--)
	{
		for(j=0;j<10;j++)
		{
			// Count votes
			for(i=0;i<7;i++)	level.mapcandidate[i]["votes"] = 0;
			players = level.players;
			for(i = 0; i < players.size; i++)
				if(isdefined(players[i].votechoice))
					level.mapcandidate[players[i].votechoice]["votes"]++;

			// Update HUD
			level.MapVoteVotes[0] setValue( level.mapcandidate[0]["votes"] );
			level.MapVoteVotes[1] setValue( level.mapcandidate[1]["votes"] );
			level.MapVoteVotes[2] setValue( level.mapcandidate[2]["votes"] );
			level.MapVoteVotes[3] setValue( level.mapcandidate[3]["votes"] );
			level.MapVoteVotes[4] setValue( level.mapcandidate[4]["votes"] );
			level.MapVoteVotes[5] setValue( level.mapcandidate[5]["votes"] );
			level.MapVoteVotes[6] setValue( level.mapcandidate[6]["votes"] );
			wait .1;
		}
		
		level.MapVoteHud[6] setValue( level.mapvotetime );
	}	

	wait 0.2;
	
	newmapnum = 0;
	topvotes = 0;
	for(i=0;i<7;i++)
	{
		if (level.mapcandidate[i]["votes"] > topvotes)
		{
			newmapnum = i;
			topvotes = level.mapcandidate[i]["votes"];
		}
	}

	SetMapWinner(newmapnum);
}

//change the map rotation to represent the current selection
SetMapWinner( winner )
{
	map		= level.mapcandidate[winner]["map"];
	mapname	= level.mapcandidate[winner]["mapname"];
	gametype	= level.mapcandidate[winner]["gametype"];

	setdvar("sv_maprotationcurrent", " gametype " + gametype + " map " + map);

	wait 0.1;

	// Stop threads
	level notify( "VotingDone" );

	// Wait for threads to die
	wait 0.05;

	// Announce winner
	//iprintlnbold("^3Wining map:");
	//iprintlnbold("^2" + mapname);
	
	nextmapText(mapname);

	// Fade HUD elements
	level.MapVoteHud[0] fadeOverTime (1);
	level.MapVoteHud[1] fadeOverTime (1);
	level.MapVoteHud[2] fadeOverTime (1);
	level.MapVoteHud[3] fadeOverTime (1);
	level.MapVoteHud[4] fadeOverTime (1);
	level.MapVoteHud[5] fadeOverTime (1);
	level.MapVoteHud[6] fadeOverTime (1);
	level.MapVoteHud[7] fadeOverTime (1);
	level.MapVoteNames[0] fadeOverTime (1);
	level.MapVoteNames[1] fadeOverTime (1);
	level.MapVoteNames[2] fadeOverTime (1);
	level.MapVoteNames[3] fadeOverTime (1);
	level.MapVoteNames[4] fadeOverTime (1);
	level.MapVoteNames[5] fadeOverTime (1);
	level.MapVoteNames[6] fadeOverTime (1);
	level.MapVoteVotes[0] fadeOverTime (1);
	level.MapVoteVotes[1] fadeOverTime (1);
	level.MapVoteVotes[2] fadeOverTime (1);
	level.MapVoteVotes[3] fadeOverTime (1);	
	level.MapVoteVotes[4] fadeOverTime (1);
	level.MapVoteVotes[5] fadeOverTime (1);
	level.MapVoteVotes[6] fadeOverTime (1);

	level.MapVoteHud[0].alpha = 0;
	level.MapVoteHud[1].alpha = 0;
	level.MapVoteHud[2].alpha = 0;
	level.MapVoteHud[3].alpha = 0;
	level.MapVoteHud[4].alpha = 0;
	level.MapVoteHud[5].alpha = 0;
	level.MapVoteHud[6].alpha = 0;
	level.MapVoteHud[7].alpha = 0;
	level.MapVoteNames[0].alpha = 0;
	level.MapVoteNames[1].alpha = 0;
	level.MapVoteNames[2].alpha = 0;
	level.MapVoteNames[3].alpha = 0;
	level.MapVoteNames[4].alpha = 0;
	level.MapVoteNames[5].alpha = 0;
	level.MapVoteNames[6].alpha = 0;
	level.MapVoteVotes[0].alpha = 0;
	level.MapVoteVotes[1].alpha = 0;
	level.MapVoteVotes[2].alpha = 0;
	level.MapVoteVotes[3].alpha = 0;	
	level.MapVoteVotes[4].alpha = 0;
	level.MapVoteVotes[5].alpha = 0;
	level.MapVoteVotes[6].alpha = 0;

	players = level.players;
	for(i = 0; i < players.size; i++)
	{
		if(isdefined(players[i].vote_indicator))
		{
			players[i].vote_indicator fadeOverTime (1);
			players[i].vote_indicator.alpha = 0;
		}
	}

	// Show winning map for a few seconds
	wait 4;
	level notify( "VotingComplete" );
}

nextmapText(mapname)
{
	thread nextmapMap(mapname);
	level.hud["nextmap_text"] = NewHudElem();
	level.hud["nextmap_text"].x = 0;
	level.hud["nextmap_text"].y = 0;
	level.hud["nextmap_text"].alignx = "center";
	level.hud["nextmap_text"].aligny = "middle";
	level.hud["nextmap_text"].horzAlign = "center";
	level.hud["nextmap_text"].vertAlign = "middle";
	level.hud["nextmap_text"].font = "default";
	level.hud["nextmap_text"].fontScale = 2.8;
	level.hud["nextmap_text"].Color = level.info["hud"]["color"];
	level.hud["nextmap_text"].glowColor = level.info["hud"]["glowcolor"];
	level.hud["nextmap_text"].glowAlpha = 0.6;
	level.hud["nextmap_text"] setText("Next Map:");
	
	level.hud["nextmap_text"].alpha = 0;
	level.hud["nextmap_text"] FadeOverTime(1);
	level.hud["nextmap_text"].alpha = 0.9;
	wait(4);
	level.hud["nextmap_text"] FadeOverTime(1);
	level.hud["nextmap_text"].alpha = 0;
	//level.hud["nextmap_text"] destroy();
}

nextmapMap(mapname)
{
	level.hud["nextmap_map"] = NewHudElem();
	level.hud["nextmap_map"].x = 0;
	level.hud["nextmap_map"].y = 40;
	level.hud["nextmap_map"].alignx = "center";
	level.hud["nextmap_map"].aligny = "middle";
	level.hud["nextmap_map"].horzAlign = "center";
	level.hud["nextmap_map"].vertAlign = "middle";
	level.hud["nextmap_map"].font = "default";
	level.hud["nextmap_map"].fontScale = 2.8;
	level.hud["nextmap_map"].Color = level.info["hud"]["color"];
	level.hud["nextmap_map"].glowColor = level.info["hud"]["glowcolor"];
	level.hud["nextmap_map"].glowAlpha = 0.6;
	level.hud["nextmap_map"] setText(mapname);
	
	level.hud["nextmap_map"].alpha = 0;
	level.hud["nextmap_map"] FadeOverTime(1);
	level.hud["nextmap_map"].alpha = 0.9;
	wait(4);
	level.hud["nextmap_map"] FadeOverTime(1);
	level.hud["nextmap_map"].alpha = 0;
	//level.hud["nextmap_map"] destroy();
}

GetRandomMapVoteRotation()
{
	
	gtrotstr = getdvar("d_map_vote_gametypes");
	gtrot_array = listOfStringsToArray(gtrotstr);
	
	// Spawn entity to hold the array
	x = spawn( "script_origin",(0,0,0) );
	x.maps = [];
	z=0;
		
	for(i=0; i<gtrot_array.size; i++)
	{
		gt=gtrot_array[i];
		gtmaprotstr = getdvar("d_map_vote_" + gt + "_maps");
		if(isdefined(gtmaprotstr))
		{
			gtmaprot = listOfStringsToArray(gtmaprotstr);
		  
			for(j=0; j<gtmaprot.size; j++)
			{
				x.maps[z]["gametype"] = gt ;
				x.maps[z]["map"] = gtmaprot[j];
				z++;
			}
		}
	}

	// Shuffle the array 20 times
	for(k = 0; k < 20; k++)
	{
		for(i = 0; i < x.maps.size; i++)
		{
			j = randomInt(x.maps.size);
			element = x.maps[i];
			x.maps[i] = x.maps[j];
			x.maps[j] = element;
		}
	}


	return x;
}

listOfStringsToArray(list)
{
		
	list = strip(list);
		
	j=0;
	temparr2[j] = "";	
	for(i=0;i<list.size;i++)
	{
		if(list[i]==" ")
		{
			j++;
			temparr2[j] = "";
		}
		else
			temparr2[j] += list[i];
	}

	// Remove empty elements (double spaces)
	temparr = [];
	for(i=0;i<temparr2.size;i++)
	{
		element = strip(temparr2[i]);
		if(element != "")
		{
			temparr[temparr.size] = element;
		}
	}
	return temparr;
}

GetRandomMapRotation()
{
	return GetMapRotation( true, false, undefined );
}

GetMapRotation( random, current, number )
{
	maprot = "";

	if( !isdefined( number ) )
		number = 0;

	if( current )
		maprot = strip( getDvar( "sv_maprotationcurrent" ) );

	if( maprot == "" ) maprot = strip( getDvar( "sv_maprotation" ) );

	if( maprot == "" )
		return undefined;

	j = 0;
	temparr2[j] = "";	
	for( i=0; i < maprot.size; i++ )
	{
		if( maprot[i] == " " )
		{
			j++;
			temparr2[j] = "";
		}
		else
			temparr2[j] += maprot[i];
	}

	// Remove empty elements (double spaces)
	temparr = [];
	for( i=0; i < temparr2.size; i++ )
	{
		element = strip( temparr2[i] );
		if(element != "")
		{
			temparr[temparr.size] = element;
		}
	}

	// Spawn entity to hold the array
	x = spawn( "script_origin", (0,0,0) );

	x.maps = [];
	
	lastgt = level.gametype;
	temp = undefined;
	
	for( i=0; i < temparr.size; )
	{
		switch( temparr[i] )
		{
			case "gametype":
				if( isdefined( temparr[i+1] ) )
					lastgt = temparr[i+1];
				i += 2;
				break;

			case "map":
				if( isdefined( temparr[i+1] ) )
				{
					x.maps[x.maps.size]["temp"]	= temp;
					x.maps[x.maps.size-1]["gametype"]	= lastgt;
					x.maps[x.maps.size-1]["map"]	= temparr[i+1];
				}
				// Only need to save this for random rotations
				if( !random )
				{
					lastgt = undefined;
					temp = undefined;
				}

				i += 2;
				break;

			// If code get here, then the maprotation is corrupt so we have to fix it
			default:
				iprintlnbold( "mod: Error in Map Rotation" );
	
				if( isGametype( temparr[i] ) )
					lastgt = temparr[i];
				else
				{
					x.maps[x.maps.size]["temp"]	= temp;
					x.maps[x.maps.size-1]["gametype"]	= lastgt;
					x.maps[x.maps.size-1]["map"]	= temparr[i];
	
					// Only need to save this for random rotations
					if( !random )
					{
						lastgt = undefined;
						temp = undefined;
					}
				}

				i += 1;
				break;
		}
		if( number && x.maps.size >= number )
			break;
	}

	if( random )
	{
		// Shuffle the array 20 times
		for( k = 0; k < 20; k++ )
		{
			for(i = 0; i < x.maps.size; i++)
			{
				j = randomInt( x.maps.size );
				element = x.maps[i];
				x.maps[i] = x.maps[j];
				x.maps[j] = element;
			}
		}
	}

	return x;
}

getMapName( map )
{
	switch( map )
	{
		case "mp_backlot":
			mapname = "Backlot";
			break;

		case "mp_bloc":
			mapname = "Bloc";
			break;

		case "mp_bog":
			mapname = "Bog";
			break;
		
		case "mp_countdown":
			mapname = "Countdown";
			break;

		case "mp_cargoship":
			mapname = "Wet Work";
			break;

		case "mp_citystreets":
			mapname = "District";
			break;

		case "mp_convoy":
			mapname = "Ambush";
			break;
		
		case "mp_crash":
			mapname = "Crash";
			break;

		case "mp_crash_snow":
			mapname = "Winter Crash";
			break;
		
		case "mp_crossfire":
			mapname = "Crossfire";
			break;
		
		case "mp_farm":
			mapname = "Downpour";
			break;

		case "mp_overgrown":
			mapname = "Overgrown";
			break;

		case "mp_pipeline":
			mapname = "Pipeline";
			break;
		
		case "mp_shipment":
			mapname = "Shipment";
			break;

		case "mp_showdown":
			mapname = "Showdown";
			break;

		case "mp_strike":
			mapname = "Strike";
			break;

		case "mp_vacant":
			mapname = "Vacant";
			break;

		case "mp_carentan":
			mapname = "ChinaTown";
			break;

		case "mp_creek":
			mapname = "Creek";
			break;

		case "mp_broadcast":
			mapname = "Broadcast";
			break;

		case "mp_killhouse":
			mapname = "Killhouse";
			break;

		default:
		    // Strip mp_ prefix
		    if( getsubstr( map, 0, 3 ) == "mp_" )
				mapname = getsubstr( map, 3 );
			else
				mapname = map;
			// Change underscores to space and make words capitalized
			tmp = "";
			from = "abcdefghijklmnopqrstuvwxyz";
		    to   = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		    nextisuppercase = true;
			for(i=0;i<mapname.size;i++)
			{
				if(mapname[i] == "_")
				{
					tmp += " ";
					nextisuppercase = true;
				}
				else if (nextisuppercase)
				{
					found = false;
					for(j = 0; j < from.size; j++)
					{
						if(mapname[i] == from[j])
						{
							tmp += to[j];
							found = true;
							break;
						}
					}
					
					if(!found)
						tmp += mapname[i];
					nextisuppercase = false;
				}
				else
					tmp += mapname[i];
			}
			// Change postfixes like B1 to Beta1
			if((getsubstr(tmp,tmp.size-2)[0] == "B")&&(issubstr("0123456789",getsubstr(tmp,tmp.size-1))))
				mapname = getsubstr(tmp,0,tmp.size-2)+"Beta"+getsubstr(tmp,tmp.size-1);
			else
				mapname = tmp;
			break;
	}

	return mapname;
}

getGametypeName( gt )
{
	switch( gt )
	{

		case "gg":
			gtname = "Gun Game";
			break;
			
		case "dm":
			gtname = "Free for All";
			break;
		
		case "war":
			gtname = "Team Deathmatch";
			break;

		case "sd":
			gtname = "Search & Destroy";
			break;

		case "koth":
			gtname = "Headquarters";
			break;

		case "dom":
			gtname = "Domination";
			break;
			
		case "sab":
			gtname = "Sabotage";
			break;

		case "ctf":
			gtname = "Capture the Flag";
			break;

		case "re":
			gtname = "Retrieval";
			break;

		case "ta":
			gtname = "Team Assault";
			break;
			
		default:
			gtname = gt;
			break;
	}

	return gtname;
}

strip( s )
{
	if( s=="" )
		return "";

	s2="";
	s3="";

	i=0;
	while(i<s.size && s[i]==" ")
		i++;

	// String is just blanks?
	if(i==s.size)
		return "";
	
	for(;i<s.size;i++)
	{
		s2 += s[i];
	}

	i=s2.size-1;
	while(s2[i]==" " && i>0)
		i--;

	for(j=0;j<=i;j++)
	{
		s3 += s2[j];
	}
		
	return s3;
}

isGametype( gt )
{
	switch( gt )
	{
		case "dm":
		case "tdm":
		case "sd":
		case "dom":
		case "koth":
		case "sab":
		case "ctf":
		case "re":
		case "war":
		case "ta":
		case "gg":
			return true;

		default:
			return false;
	}
}